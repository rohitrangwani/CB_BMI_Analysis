function [TimeStamps, Waves, Duration] = fn_readPlxFile(filename,tetrodeFlag,durFlag)
%----------------------------------------------------------------------------
% Function to read plx files generated by Plexon Offline Sorter
% Author@ Aamir Abbasi
% INPUT -
%   -- filename: full path of plexon file as a string
%   -- tetrodeFlag: 0 for importing MEA sorting (default)
%                   1 for importing tetrode sorting
%   -- durationFlag: 0 don't read duration (default)
%                    1 read only duration
% OUTPUT -
%   -- TimeStamps: A cell array of timestamps of each unit across
%                  32 channels
%   -- Waves: A cell array of waveforms traces
%   -- Duration: Last timestamp of the plx file in seconds
%----------------------------------------------------------------------------

if nargin == 1
  tetrodeFlag = 0;
  durFlag = 0;
  Duration = [];
end
if nargin == 2
  durFlag = 0;
  Duration = [];
end
nChans = 32;
nUnits = 6;
TimeStamps = cell(nChans,nUnits);
Waves = cell(nChans,nUnits);
if durFlag == 0
  for i=1:nChans
    for j=1:nUnits
      [n, ~, ts, wave] = plx_waves_v(filename, i, j);
      if n > 200
        TimeStamps{i,j+1} = ts';
        Waves{i,j+1} = wave';
      end
    end
  end
  if tetrodeFlag == 1
    nChans = 1:4:nChans;
    TS = cell(length(nChans),nUnits);
    W = cell(length(nChans),nUnits);
    for i = 1:length(nChans)
      for j = 2:nUnits
        TS{i,j} = TimeStamps{nChans(i),j};
        W{i,j} = [Waves{nChans(i),j}; Waves{nChans(i)+1,j}; Waves{nChans(i)+2,j}; Waves{nChans(i)+3,j}];
      end
    end
    TimeStamps = TS; Waves = W;
  end
end
if durFlag == 1
  [~, ~, ~, ~, ~, ~, ~, ~, ~, ~, ~, Duration, ~] = plx_information(filename);
end


